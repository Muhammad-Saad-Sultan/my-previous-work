#include <iostream>
using namespace std;
int main()
{
    int arr[11];
        
    /*
    (1) Arithmetic Series:

    => 3 , 7 , 11 , 15 , 19 , 23 , 27 , 31 , 35 , 39 , ...... 

    => There is a difference of 4 numbers between every next number......
    */

    cout << "(1) Arithmetic Series: " << endl;
    cout << "\t\t3, ";
    for (int i = 1; i < 10; i++)
    {
        arr[0] = 3;
        arr[i] = arr[i-1] + 4;
        cout << arr[i] << ", ";
    }
    cout << endl;

    /*
    (2) Geometric Series:

    => 2 , 6 , 18 , 54 , 162 , 486 , 1458 , 4374 , 13122 , 39366 , ...... 

    => Every next number is generated by multiplying the previous number by 3......
    */

    cout << "(2) Geometric Series: " << endl;
    cout << "\t\t2, ";
    for(int i = 1; i < 10; i++)
    {
        arr[0] = 2;
        arr[i] = arr[i-1] * 3;
        cout << arr[i] << ", ";
    }
    cout << endl;

    /*
    (3) Square Numbers:

    => 1 , 4 , 9 , 16 , 25 , 36 , 49 , 64 , 81 , 100 , ......

    => Every number is the square of the "n" number. Here 'n' means an integer......
    */

    cout << "(3) Square Numbers: " << endl;
    for(int i = 1; i < 10+1; i++)
    {
        arr[i] = i * i;
        cout << arr[i] << ", ";
    }
    cout << endl;

    /*
    (4) Prime Numbers:

    => 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 23 , 29 , ......

    => Every number is unique and only divides by 1 and itself with 0 remainder......
    */
    /*
    cout << "(4) Prime Numbers: " << endl;
    for(int i = 1; i < 10+1; i++)
    {
        if(i%)
        cout << arr[i] << ", ";
    }
    cout << endl;*/

    /*
    (5) Triangular Numbers:

    => 1 , 3 , 6 , 10 , 15 , 21 , 28 , 36 , 45 , 55 , ......

    => Every Next number is generated by adding its index number into the previous value......
    */

    cout << "(5) Triangular Numbers:" << endl;
    cout << "1, ";
    for(int i = 2; i < 10+1; i++)
    {
        arr[1] = 1;
        arr[i] = arr[i-1] + i;
        cout << arr[i] << ", ";
    }
    cout << endl;

    /*
    (6) Powers of 2:

    => 2 , 4 , 8 , 16 , 32 , 64 , 128 , 256 , 512 , 1024 , ......

    => Every number is generated by putting the index number as the power of 2......
    */
    
    cout << "" << endl;


    /*
    (7) Cube Numbers:

    => 1 , 8 , 27 , 64 , 125 , 216 , 343 , 512 , 729 , 1000 , ......

    => Every number is generated by taking the cube of the index number......
    */



    /*
    (8) Fibonacci-Like Series:

    => 2 , 4 , 6 , 10 , 16 , 26 , 42 , 68 , 110 , 178 , ......

    => Every nuber is generated by adding previous two numbers......
    */

 
return 0;
}